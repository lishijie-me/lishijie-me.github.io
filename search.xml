<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>首页-myIndex</title>
    <url>/2025/01/02/myIndex/</url>
    <content><![CDATA[<h2 id="我的笔记"><a href="#我的笔记" class="headerlink" title="我的笔记"></a>我的笔记</h2><ul>
<li>xx<ul>
<li>2<ul>
<li>3</li>
</ul>
</li>
</ul>
</li>
<li>yy</li>
<li>zz</li>
</ul>
<h2 id="我读的书"><a href="#我读的书" class="headerlink" title="我读的书"></a>我读的书</h2>]]></content>
      <categories>
        <category>myIndex</category>
      </categories>
      <tags>
        <tag>myIndex</tag>
      </tags>
  </entry>
  <entry>
    <title>进阶</title>
    <url>/2025/01/12/java-upgrade-000/</url>
    <content><![CDATA[<h2 id="深入基础"><a href="#深入基础" class="headerlink" title="深入基础"></a>深入基础</h2><p>模块一:JVM进阶–Java开发者大厂面试必知必会</p>
<p>模块二:NIO技术–构建高吞吐服务器的终极武器</p>
<p>模块三:并发编程–多核处理器时代高性能的秘诀</p>
<p>模块四::开发框架–深入理解Spring等主流框架思想</p>
<h2 id="剖析性能"><a href="#剖析性能" class="headerlink" title="剖析性能"></a>剖析性能</h2><p>模块五:系统性能优化–学会性能分析与MySQL优化</p>
<p>模块六:超越分库分表–掌握海量业务数据的应对之道</p>
<h2 id="掌握分布式"><a href="#掌握分布式" class="headerlink" title="掌握分布式"></a>掌握分布式</h2><p>模块七:分布式服务–复杂业务系统架构演进必由之路</p>
<p>模块八:分布式缓存–复杂业务系统访问提速第一法宝</p>
<p>模块九:分布式消息–复杂业务系统关系解耦不二法门</p>
<h2 id="综合运用"><a href="#综合运用" class="headerlink" title="综合运用"></a>综合运用</h2><p>模块十:分布式系统架构–如何设计高并发高可用的Java系统</p>
<p>模块十一:业务系统重构–重构遗留系统是架构师的必修技能</p>
<p>模块十二:架构师修炼之道–如何升级打怪终成一线技术专家</p>
<h2 id="八大实战案例"><a href="#八大实战案例" class="headerlink" title="八大实战案例"></a>八大实战案例</h2><p>案例一:JVM–使用IVM分析工具剖析JVM系统性能</p>
<p>案例二:NI0–使用Nety实现一个高性能业务网关</p>
<p>案例三:并发–使用多线程实现高并发业务处理程序</p>
<p>案例四:数据–基于分库分表优化处理千万业务数据</p>
<p>案例五:分布式–设计实现一个功能完善的服务框架</p>
<p>案例六:分布式–设计实现一个简单高效的消息队列</p>
<p>案例七:重构–淘宝某业务系统的优化重构经验拆解</p>
<p>案例八:i高并发–设计一个简版双十一&#x2F;618秒杀系统</p>
<h2 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h2><p>每节课都有2-4道作业题</p>
<p>类型:编程、画图、调研</p>
<p>直接辅导完成作业</p>
]]></content>
      <tags>
        <tag>Fx</tag>
        <tag>Solution</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM进阶01-基础知识</title>
    <url>/2025/01/11/java-upgrade-101/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><p>编程语言有很多种，高级语言、汇编语言、机器语言，分类有多个标准</p>
<ul>
<li>面向过程、面向对象、面向函数</li>
<li>静态类型、动态类型</li>
<li>编译执行、解释执行</li>
<li>有虚拟机、无虚拟机</li>
<li>有 GC、无 GC</li>
</ul>
<p>综上，Java 是一种面向对象、静态类型、编译执行，有 VM&#x2F;GC 和运行时、跨平台的高级语言。</p>
<h3 id="编程语言跨平台"><a href="#编程语言跨平台" class="headerlink" title="编程语言跨平台"></a>编程语言跨平台</h3><ul>
<li>源代码跨平台</li>
</ul>
<p><img src="/images/java-upgrade-101/image-20250114211601481.png" alt="image-20250114211601481"></p>
<ul>
<li>二进制跨平台</li>
</ul>
<p><img src="/images/java-upgrade-101/image-20250114211620527.png" alt="image-20250114211620527"></p>
<h3 id="Java、C-、Rust-的区别"><a href="#Java、C-、Rust-的区别" class="headerlink" title="Java、C++、Rust 的区别"></a>Java、C++、Rust 的区别</h3><ul>
<li>C&#x2F;C++ 完全相信而且惯着程序员，让大家自行管理内存，可以编写很自由的代码，但一不小心就会造成内存泄漏等问题，导致程序崩溃。</li>
<li>Java&#x2F;Golang 完全不相信程序员，但也惯着程序员。所有的内存生命周期都由 JVM 运行时统一管理。在绝大部分场景下，你可以非常自由的写代码，而且不用关心内存到底是什么情况。 内存使用有问题的时候，我们可以通过 JM 来进行信息相关的分析诊断和调整。这也是本课程的目标。</li>
<li>Rust 语言选择既不相信程序员，也不惯着程序员。让你在写代码的时候，必须清楚明白的用 Rust 的规则管理好你的变量，好让机器能明白高效地分析和管理内存。 但是这样会导致代码不利于人的理解，写代码很不自由，学习成本也很高。</li>
</ul>
<h3 id="字节码、类加载器、虚拟机"><a href="#字节码、类加载器、虚拟机" class="headerlink" title="字节码、类加载器、虚拟机"></a>字节码、类加载器、虚拟机</h3><p><img src="/images/java-upgrade-101/image-20250114212452620.png" alt="image-20250114212452620"></p>
<p>Java 语言中主要研究探索的，就是这三者的运行，和数据在它们之间的流转</p>
<ul>
<li>字节码：经过编译后，确定每一步的运算、让 Java 语言实现跨平台移植；</li>
<li>类加载器：把字节码文件还原为对象，进行运算；</li>
<li>虚拟机：管理每一步的内存分配和回收。</li>
</ul>
<h2 id="Java-字节码技术"><a href="#Java-字节码技术" class="headerlink" title="Java 字节码技术"></a>Java 字节码技术</h2><p>不感兴趣可跳过，日常工作中，使用场景几乎没有</p>
<blockquote>
<p>两段不同的代码，实现相同的功能，他们到底有什么本质的不同？可以通过字节码进行分析</p>
</blockquote>
<h3 id="什么是字节码？"><a href="#什么是字节码？" class="headerlink" title="什么是字节码？"></a>什么是字节码？</h3><blockquote>
<p>Java bytecode 由单字节(byte)的指令组成，理论上最多支持 256 个操作码(opcode)实际上 Java 只使用了200左右的操作码，还有一些操作码则保留给调试操作。</p>
</blockquote>
<p>根据指令的性质，主要分为四个大类：</p>
<ul>
<li>栈操作指令，包括与局部变量交互的指令</li>
</ul>
<p>jvm 是基于栈 进行操作的计算机，所有的计算都发生在栈上；</p>
<ul>
<li>程序流程控制指令</li>
</ul>
<p>控制代码的具体流程</p>
<ul>
<li>对象操作指令，包括方法调用指令</li>
</ul>
<p>调用对象的一些方法</p>
<ul>
<li>算术运算以及类型转换指令</li>
</ul>
<p>不同类型之前的转换</p>
<h3 id="生成字节码"><a href="#生成字节码" class="headerlink" title="生成字节码"></a>生成字节码</h3><p>假如有一个类，源代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.money.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloByteCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HelloByteCode</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloByteCode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编译</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac io/money/test/HelloByteCode.java</span><br></pre></td></tr></table></figure>

<ul>
<li>查看字节码</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看字节码信息</span></span><br><span class="line">javap -c io.money.test.HelloByteCode</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看更详细的字节码信息</span></span><br><span class="line">javap -c -verbose io.money.test.HelloByteCode</span><br><span class="line"></span><br><span class="line">stack=2, locals=2, args_size=1</span><br><span class="line">含义是：此段运算，栈的深度是2，本地变量表 中需要用到的槽位数是 2，参数个数是 1 </span><br><span class="line">字节码设计的精妙在于：通过字节码 可以知道此段运算的栈深度，本地变量表的槽位数，参数个数，这一切都是已知的、可控的，执行完成后，这些信息都会被销毁</span><br></pre></td></tr></table></figure>

<p>数据的流转如下：</p>
<ul>
<li>LOAD：把变量 <strong>加载到</strong> 栈上</li>
<li>STORE：计算完成后，把结果 <strong>存放到</strong> 栈上</li>
</ul>
<p>所有的值都是存在本地变量表（LOCAL VARIABLE）中，所有的计算都发生在栈（STACK）上</p>
<p><img src="/images/java-upgrade-101/image-20250114215407789.png" alt="image-20250114215407789"></p>
<h3 id="字节码的运行时结构"><a href="#字节码的运行时结构" class="headerlink" title="字节码的运行时结构"></a>字节码的运行时结构</h3><ul>
<li>JVM 是一台基于栈的计算机器。每个线程都有一个独属于自己的线程栈(JVM Stack)，用于存储栈帧(Frame)<br>每一次方法调用，JVM 都会自动创建一个栈。栈帧由操作数栈，局部变量数组以及一个 Class 引用组成。Class 引用 指向当前方法在运行时常量池中对应的Class</li>
</ul>
<p><img src="/images/java-upgrade-101/image-20250114220539859.png" alt="image-20250114220539859"></p>
<h3 id="从助记符到二进制"><a href="#从助记符到二进制" class="headerlink" title="从助记符到二进制"></a>从助记符到二进制</h3><ul>
<li>字节码的本质是二进制，通过转换为 类似汇编语言的 助记符 ，让我们更方便的阅读</li>
<li>字节码 和 助记符 是一一对应的</li>
</ul>
<h3 id="一个动态计算的例子"><a href="#一个动态计算的例子" class="headerlink" title="一个动态计算的例子"></a>一个动态计算的例子</h3><p><img src="/images/java-upgrade-101/image-20250114223340296.png" alt="image-20250114223340296"></p>
<h3 id="问题1：用代码实现四则运算，然后分析其字节码？for-循环呢？"><a href="#问题1：用代码实现四则运算，然后分析其字节码？for-循环呢？" class="headerlink" title="问题1：用代码实现四则运算，然后分析其字节码？for 循环呢？"></a>问题1：用代码实现四则运算，然后分析其字节码？for 循环呢？</h3><h3 id="问题2：int-和-long-相互转换，字节码对应的操作-是原子性的吗？其他类型呢？"><a href="#问题2：int-和-long-相互转换，字节码对应的操作-是原子性的吗？其他类型呢？" class="headerlink" title="问题2：int 和 long 相互转换，字节码对应的操作 是原子性的吗？其他类型呢？"></a>问题2：int 和 long 相互转换，字节码对应的操作 是原子性的吗？其他类型呢？</h3><h2 id="JVM-类加载器"><a href="#JVM-类加载器" class="headerlink" title="JVM 类加载器"></a>JVM 类加载器</h2><blockquote>
<p>字节码和最终的计算，这个过程之间，缺了一段</p>
<ul>
<li>类加载：类如何加载到内存中？</li>
<li>面向对象：如何把参数塞到对象中？</li>
</ul>
<p>这些都是通过 <strong>类加载器</strong> 完成的，每一段 Java 代码编译成字节码后， 最终都要被类加载器转换为 Java 类，然后被JVM 加载到虚拟机中，供后续执行</p>
</blockquote>
<h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p><img src="/images/java-upgrade-101/image-20250114224147443.png" alt="image-20250114224147443"></p>
<ol>
<li>加载(Loading):找 Class 文件</li>
<li>验证(Verification):验证格式、依赖</li>
<li>准备(Preparation):静态字段、方法表</li>
<li>解析(Resolution):符号解析为引用</li>
<li>初始化(Initialization):构造器、静态变量赋值、静态代码块</li>
<li>使用(Using)</li>
<li>卸载(Unloading)</li>
</ol>
<h3 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h3><ol>
<li>当虚拟机启动时，初始化用户指定的主类，就是启动执行的 main 方法所在的类；</li>
<li>当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类，就是 new一个类的时候要初始化；</li>
<li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li>
<li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li>
<li>子类的初始化会触发父类的初始化；</li>
<li>如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li>
<li>使用反射 API对某个类进行反射调用时，初始化这个类，其实跟前面一样，反射调用要么是已经有实例了，要么是静态方法，都需要初始化；</li>
<li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</li>
</ol>
<h3 id="类不会初始化（可能会加载）"><a href="#类不会初始化（可能会加载）" class="headerlink" title="类不会初始化（可能会加载）"></a>类不会初始化（可能会加载）</h3><ol>
<li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li>
<li>定义对象数组，不会触发该类的初始化。</li>
<li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类不会触发定义常量所在的类。</li>
<li>通过类名获取 Class 对象，不会触发类的初始化，Hello.class 不会让 Hello 类初始化。</li>
<li>通过 Class.forName 加载指定类时，如果指定参数 initialize 为 false 时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。Class.forName(“jvm.Hello”)默认会加载 Hello 类。</li>
<li>通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作(加载了，但是不初始化)。</li>
</ol>
<h3 id="三类加载器"><a href="#三类加载器" class="headerlink" title="三类加载器"></a>三类加载器</h3><ul>
<li><p>启动类加载器（BotStrapClassLoader）：在 JDK底层，由C++实现，jdk包中是看不到的</p>
</li>
<li><p>扩展类加载器（ExClassLoader）：JDK中真实存在的类</p>
</li>
<li><p>应用类加载器（AppClassLoader）：：JDK中真实存在的类，在JDK9之前和扩展类加载器有相同的父类（URLClassLoader）</p>
</li>
</ul>
<p><img src="/images/java-upgrade-101/image-20250114225424967.png" alt="image-20250114225424967"></p>
<p>加载器特点</p>
<blockquote>
<ol>
<li>双亲委派 ：类加载器会通过查找路径（上图的箭头）去逐级向上查找是否有已存在某个对象</li>
<li>负责依赖 ；</li>
<li>缓存加载：已加载过的类，不会再次加载</li>
</ol>
</blockquote>
<p><img src="/images/java-upgrade-101/image-20250114225803796.png" alt="image-20250114225803796"></p>
<h3 id="问题：显示当前-ClassLoader-加载了哪些-jar"><a href="#问题：显示当前-ClassLoader-加载了哪些-jar" class="headerlink" title="问题：显示当前 ClassLoader 加载了哪些 jar?"></a>问题：显示当前 ClassLoader 加载了哪些 jar?</h3><p>在 类加载器的概念中，一个文件夹 等同于一个jar包，我们可以通过代码获知，我们的系统里加载了哪些 jar 包</p>
<p>具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JvmClassLoaderPrintPath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 扩展类加载器</span></span><br><span class="line">        printClassLoader(<span class="string">&quot;扩展类加载器&quot;</span>, JvmClassLoaderPrintPath.class.getClassLoader().getParent());</span><br><span class="line">        <span class="comment">// 应用类加载器</span></span><br><span class="line">        printClassLoader(<span class="string">&quot;应用类加载器&quot;</span>, JvmClassLoaderPrintPath.class.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printClassLoader</span><span class="params">(String name, ClassLoader cl)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cl != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;ClassLoader: &quot;</span> + cl.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;ClassLoader: null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printURLForClassLoader</span><span class="params">(ClassLoader cl)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ucp</span> <span class="operator">=</span> insightField(cl, <span class="string">&quot;ucp&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">path</span> <span class="operator">=</span> insightField(ucp, <span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">ps</span> <span class="operator">=</span> (ArrayList) path;</span><br><span class="line">        <span class="keyword">for</span> (Object p : ps) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;==&gt;&quot;</span> + p.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">insightField</span><span class="params">(Object obj, String fieldName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> URLClassLoader)&#123;</span><br><span class="line">                URLClassLoader.class.getDeclaredField(fieldName);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> field.get(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">扩展类加载器ClassLoader: jdk.internal.loader.ClassLoaders$PlatformClassLoader@372f7a8d</span><br><span class="line">应用类加载器ClassLoader: jdk.internal.loader.ClassLoaders$AppClassLoader@4e25154f</span><br></pre></td></tr></table></figure>

<h3 id="待办"><a href="#待办" class="headerlink" title="待办"></a>待办</h3><ul>
<li><input disabled="" type="checkbox"> 问题：自定义类加载器如何实现？</li>
</ul>
<h3 id="问题：如何通过类加载器做-jar-包的版本隔离：参考-JDK9-模块化功能"><a href="#问题：如何通过类加载器做-jar-包的版本隔离：参考-JDK9-模块化功能" class="headerlink" title="问题：如何通过类加载器做 jar 包的版本隔离：参考 JDK9 模块化功能"></a>问题：如何通过类加载器做 jar 包的版本隔离：参考 JDK9 模块化功能</h3><h3 id="添加引用类的几种方式"><a href="#添加引用类的几种方式" class="headerlink" title="添加引用类的几种方式"></a>添加引用类的几种方式</h3><ul>
<li>放到JDK 的 lib&#x2F;ext或者-Diava.ext.dirs</li>
<li>java -cp&#x2F;classpath 或者 class 文件放到当前路径</li>
<li>自定义 ClassLoader 加载</li>
<li>拿到当前执行类的 ClassLoader，反射调用 addUr 方法添加 Jar 或路径(JDK9 无效)</li>
</ul>
<h2 id="JVM-内存模型"><a href="#JVM-内存模型" class="headerlink" title="JVM 内存模型"></a>JVM 内存模型</h2><h3 id="JVM-内存结构"><a href="#JVM-内存结构" class="headerlink" title="JVM 内存结构"></a>JVM 内存结构</h3><p><img src="/images/java-upgrade-101/image-20250114235515778.png" alt="image-20250114235515778"></p>
<ul>
<li>每个线程都只能访问自己的线程栈。</li>
<li>每个线程都不能访问(看不见)其他线程的局部变量。</li>
<li>所有原生类型的局部变量都存储在线程栈中，因此对其他线程是不可见的。</li>
<li>线程可以将一个原生变量值的副本传给另一个线程，但不能共享原生局部变量本身。</li>
<li>堆内存中包含了 Java 代码中创建的所有对象!不管是哪个线程创建的。其中也涵盖了包装类型(例如 Byte，Integer，Long 等)</li>
<li>不管是创建一个对象并将其赋值给局部变量，还是赋值给另一个对象的成员变量，创建的对象都会被保存到堆内存中。</li>
</ul>
<p><img src="/images/java-upgrade-101/image-20250114235641327.png" alt="image-20250114235641327"></p>
<ul>
<li><p>如果是原生数据类型的局部变量，那么它的内容就全部保留在线程栈上。</p>
</li>
<li><p>如果是对象引用，则栈中的局部变量槽位中保存着对象的引用地址，而实际的对象内容保存在堆中</p>
</li>
<li><p>对象的成员变量与对象本身一起存储在堆上,不管成员变量的类型是原生数值，还是对象引用。</p>
</li>
<li><p>类的静态变量则和类定义一样都保存在堆中</p>
</li>
<li><p><input disabled="" type="checkbox"> 
思考：以上操作，如果，两个线程同时操作一个局部变量，存在并发问题吗？如何解决？</p>
</li>
</ul>
<p><img src="/images/java-upgrade-101/image-20250115000220518.png" alt="image-20250115000220518"></p>
<p>总结一下:</p>
<ul>
<li>方法中使用的原生数据类型和对象引用地址在栈上存储；对象、对象成员与类定义、静态变量在堆上。</li>
<li>堆内存又称为“共享堆’，堆中的所有对象，可以被所有线程访问，只要他们能拿到对象的引用地址。</li>
<li>如果一个线程可以访问某个对象时也就可以访问该对象的成员变量。</li>
<li>如果两个线程同时调用某个对象的同一方法，则它们都可以访问到这个对象的成员变量，但每个线程的局部变量副本是独立的</li>
</ul>
<h3 id="JVM-内存整体结构"><a href="#JVM-内存整体结构" class="headerlink" title="JVM 内存整体结构"></a>JVM 内存整体结构</h3><p><img src="/images/java-upgrade-101/image-20250115000430869.png" alt="image-20250115000430869"></p>
<ul>
<li>每启动一个线程，JVM 就会在栈空间栈分配对应的 线程栈,比如 1MB 的空间(-Xss1m)</li>
<li>线程栈也叫做 Java 方法栈。如果使用了JNI方法，则会分配一个单独的本地方法栈(Native Stack).</li>
<li>线程执行过程中，一般会有多个方法组成调用栈(Stack Trace)，比如A调用 B，B调用 C。每执行到一个方法，就会创建对应的 栈帧(Frame)</li>
</ul>
<blockquote>
<p> 经验之谈：Xmx 一般定义不超过 总内存的 70%，否则会经常崩溃；Xmx最大比例只能在 71%-73% 之间，大于此范围会立刻崩溃</p>
</blockquote>
<h2 id="JVM-启动参数"><a href="#JVM-启动参数" class="headerlink" title="JVM 启动参数"></a>JVM 启动参数</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      <tags>
        <tag>Fx</tag>
        <tag>Solution</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>spring 6 源码学习笔记-阅读环境搭建</title>
    <url>/2025/01/01/spring-01/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote>
<p>为什么要有这一篇文章</p>
</blockquote>
<p>Spring 框架已经成为了 Java 开发的事实标准，生产中避免不了要跟 Spring 打交道，俗话说：知己知彼，百战不殆。想要把事情做好，那必须要好好的了解下。</p>
<p>那我们首先想到的就是去看看 Spring 的源码是咋写的。今天咱们就一起搭建下 Spring 的源码阅读环境</p>
<h2 id="本文总览"><a href="#本文总览" class="headerlink" title="本文总览"></a>本文总览</h2><p><img src="/images/spring-01/image-20250102225831368.png" alt="image-20250102225831368"></p>
<h2 id="Fork-源码"><a href="#Fork-源码" class="headerlink" title="Fork 源码"></a>Fork 源码</h2><p>使用 github 将源码 Fork自己的账号，方便后续管理测试代码。当然，还有一个目的就是 防止在编译过程中报错</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote>
<p>JDK ：17.0.13</p>
<p>Geadle：8.9</p>
<p>Spring：6.0.x</p>
<ul>
<li>为什么选这个版本？6.1和6.2我都试过，编译会出奇怪的依赖错误，估计是其他工具的依赖还没调好</li>
</ul>
<p>IDEA：2024.2.1</p>
<p>Win10（i7-13700kf）</p>
</blockquote>
<h3 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h3><p>下载好之后，放到喜欢的目录，然后在环境变量中配置</p>
<ul>
<li>新建 <code>JAVA_HOME</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JAVA_HOME</span><br><span class="line">C:\Soft\Java\java-17</span><br></pre></td></tr></table></figure>

<ul>
<li>编辑 <code>Path</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在 Path 中新增配置 </span><br><span class="line">%JAVA_HOME%\bin</span><br></pre></td></tr></table></figure>

<ul>
<li>新增 <code>CLASSPATH</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CLASSPATH</span><br><span class="line">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>验证</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dos命令窗口中使用命令 java -version 打印版本信息，出现如下信息 表示配置成功</span><br></pre></td></tr></table></figure>

<p><img src="/images/spring-01/image-20250102225720499.png" alt="image-20250102225720499"></p>
<h3 id="Gradle-安装配置"><a href="#Gradle-安装配置" class="headerlink" title="Gradle 安装配置"></a>Gradle 安装配置</h3><p>下载好之后，放到喜欢的目录，然后在环境变量中配置</p>
<ul>
<li>新建 <code>GRADLE_HOME</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRADLE_HOME</span><br><span class="line">C:\Program Files\gradle</span><br></pre></td></tr></table></figure>

<ul>
<li>编辑 <code>Path</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在 Path 中新增配置 </span><br><span class="line">%GRADLE_HOME%\bin</span><br></pre></td></tr></table></figure>

<ul>
<li>新建 <code>GRADLE_USER_HOME</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRADLE_USER_HOME</span><br><span class="line">C:\Program Files\gradle\repository</span><br></pre></td></tr></table></figure>

<ul>
<li>验证</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dos命令窗口中使用命令 gradle -V 打印版本信息，出现如下信息 表示配置成功</span><br></pre></td></tr></table></figure>

<p><img src="/images/spring-01/image-20250102192820519.png" alt="image-20250102192820519"></p>
<h3 id="Gradle-在-IDEA-中的配置"><a href="#Gradle-在-IDEA-中的配置" class="headerlink" title="Gradle 在 IDEA 中的配置"></a>Gradle 在 IDEA 中的配置</h3><p>先打开IDEA查看 Gradle 配置，选择本地安装的 Gradle，防止源码在编译过程中，再次下载gradle</p>
<p><img src="/images/spring-01/image-20250102192930338.png" alt="image-20250102192930338"></p>
<h3 id="下载代码到本地"><a href="#下载代码到本地" class="headerlink" title="下载代码到本地"></a>下载代码到本地</h3><p> 使用 git bash 窗口，把上面 Fork 的 源码 克隆到本地，切换分支到 6.0.x</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## 克隆代码</span><br><span class="line">git clone https://github.com/lishijie-me/spring-framework.git</span><br><span class="line">## 切换分支</span><br><span class="line">git checkout 6.0.x</span><br></pre></td></tr></table></figure>



<h2 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h2><p>使用 IDEA 打开本地的 spring 源码，等待编译完成</p>
<p>整个过程比较久，实测下来得 30mins+，可以喝杯茶再回来，出现下图就是编译完成了</p>
<p><img src="/images/spring-01/image-20250102190447792.png" alt="image-20250102190447792"></p>
<h2 id="新增测试模块"><a href="#新增测试模块" class="headerlink" title="新增测试模块"></a>新增测试模块</h2><h3 id="新增模块"><a href="#新增模块" class="headerlink" title="新增模块"></a>新增模块</h3><p>使用 IDEA 新增模块：除了标题自定义，其他的都选默认的就行</p>
<p><img src="/images/spring-01/image-20250102212339610.png" alt="image-20250102212339610"></p>
<blockquote>
<p>build.gradle 文件，新增spring-context模块依赖，该模块包含了spring-core和spring-bean 、IOC容器等Spring 运行时上下文依赖内容</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&#x27;org.springframework&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;6.0.23-SNAPSHOT&#x27;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    api(project(<span class="string">&quot;:spring-context&quot;</span>))  <span class="comment">// 只新增这一行，其余代码都是默认的</span></span><br><span class="line">    testImplementation <span class="title function_">platform</span><span class="params">(<span class="string">&#x27;org.junit:junit-bom:5.10.0&#x27;</span>)</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>项目根目录的 settings.gradle 文件会新增 一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include &#x27;spring-simple&#x27;</span><br></pre></td></tr></table></figure>

<p>编译完成如下</p>
</blockquote>
<p><img src="/images/spring-01/image-20250102213221257.png" alt="image-20250102213221257"></p>
<h3 id="编码验证"><a href="#编码验证" class="headerlink" title="编码验证"></a>编码验证</h3><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.money.spring.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.money.spring.simple.service.IAnimalService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 成行（lishijie-me）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/1/2 星期四 21:46:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> SpringSimpleApplication</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.money.spring.simple.**&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSimpleApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringSimpleApplication.class);</span><br><span class="line">		<span class="type">IAnimalService</span> <span class="variable">animalService</span> <span class="operator">=</span> context.getBean(IAnimalService.class);</span><br><span class="line">		animalService.sport();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="创建实现类"><a href="#创建实现类" class="headerlink" title="创建实现类"></a>创建实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.money.spring.simple.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.money.spring.simple.service.IAnimalService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 成行（lishijie-me）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/1/2 星期四 21:42:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> BirdService</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BirdService</span> <span class="keyword">implements</span> <span class="title class_">IAnimalService</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sport</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;I can fly !!!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.money.spring.simple.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.money.spring.simple.service.IAnimalService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 成行（lishijie-me）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/1/2 星期四 21:44:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> FishService</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FishService</span> <span class="keyword">implements</span> <span class="title class_">IAnimalService</span> &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sport</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;I can swimming !!!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.money.spring.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.money.spring.simple.service.IAnimalService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 成行（lishijie-me）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2025/1/2 星期四 21:46:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> SpringSimpleApplication</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.money.spring.simple.**&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSimpleApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringSimpleApplication.class);</span><br><span class="line">		<span class="type">IAnimalService</span> <span class="variable">animalService</span> <span class="operator">=</span> context.getBean(IAnimalService.class);</span><br><span class="line">		animalService.sport();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="启动验证"><a href="#启动验证" class="headerlink" title="启动验证"></a>启动验证</h4><p>出现下图即表示验证成功</p>
<p><img src="/images/spring-01/image-20250102225056421.png" alt="image-20250102225056421"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>后续如无特殊说明，都是基于 6.0.x 进行的测试</p>
<p>在最后一步验证启动之前，使用 JDK-21 都可以成功，但是一旦启动，就会直接报不兼容，无奈只能把 JDK 版本回退到 17.0.13</p>
<p>开始源码阅读，go！</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring源码阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz的学习和应用</title>
    <url>/2024/12/29/fx-quartz/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h2 id="基本应用"><a href="#基本应用" class="headerlink" title="基本应用"></a>基本应用</h2><h2 id="具体原理"><a href="#具体原理" class="headerlink" title="具体原理"></a>具体原理</h2><h2 id="方案缺陷和优化"><a href="#方案缺陷和优化" class="headerlink" title="方案缺陷和优化"></a>方案缺陷和优化</h2>]]></content>
      <categories>
        <category>Fx</category>
      </categories>
      <tags>
        <tag>Fx</tag>
      </tags>
  </entry>
</search>
